{"_type":"export","__export_format":4,"__export_date":"2023-11-18T03:26:17.396Z","__export_source":"insomnia.desktop.app:v2023.4.0","resources":[{"_id":"req_011a294d57444d2e81c6dbb94309b99d","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1700277907756,"created":1699574874865,"url":"{{ _.base_path }}user/login/initiate","name":"Login Initiate","description":"Run this call, then go to the redirect url given to complete the login. After browser says you're ready to go, run \"Login Complete\" to get the token and store in the environment. ","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[{"id":"pair_ecb13ae80f29455e902d79a9a97617f7","name":"provider","value":"podinate","description":""}],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1700094043460.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","parentId":null,"modified":1681892679546,"created":1681892679546,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_38d9413a9bb84df287e1d429e2dc3e6b","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1700277804282,"created":1700274117829,"url":"{{ _.base_path }}user/login/complete","name":"Login Complete","description":"","method":"GET","body":{},"parameters":[{"id":"pair_9e05bd4928474b12b6bfcd881b1ea52e","name":"token","value":"{% response 'body', 'req_011a294d57444d2e81c6dbb94309b99d', 'b64::JC50b2tlbg==::46b', 'never', 60 %}","description":""},{"id":"pair_c338244317954fa7813ca3a544d15c2a","name":"client","value":"Insomnia","description":""}],"headers":[],"authentication":{},"metaSortKey":-1692965729736,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_941d6fea147b4f95bd343eee2b486cad","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1700277807760,"created":1699913969092,"url":"{{ _.http_host }}v0/user/login/redirect/abc123","name":"Login Redirection","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1689491610058,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c921d9bc804b45a3aad397934f916131","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1686017585379,"created":1686017490380,"url":"localhost:3001/v0/project/corporate-blog/pod/hello-world","name":"Delete Pod","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"id":"pair_e9ba6642f93c46b9ad66b4f8edc81baf","name":"account","value":"test","description":""}],"authentication":{},"metaSortKey":-1686017490380,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b0fccf3d59944d70ba000fc773ec9672","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1686016488192,"created":1686016461535,"url":"localhost:3001/v0/project/corporate-blog/pod","name":"Get All Pods","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_7342421b15ff4796b913caafe80351e1","name":"account","value":"test","description":""}],"authentication":{},"metaSortKey":-1686016461535,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fe4701728bc34e789be4e69da0097278","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1685413576056,"created":1685413547945,"url":"localhost:3001/v0/project/corporate-blog/pod/hello-world","name":"Get Pod","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_2e1217f05dc947538d65e80ce8e1a351","name":"account","value":"test","description":""}],"authentication":{},"metaSortKey":-1685413547945,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_05cdcc4b039a4057bc04b78c46bd3557","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1685402550888,"created":1684125408150,"url":"localhost:3001/v0/project/corporate-blog/pod","name":"Create Pod","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"id\": \"hello-world\",\n  \"name\": \"Hello World\",\n  \"image\": \"wordpress\",\n  \"tag\": \"6.0\"\n}"},"parameters":[],"headers":[{"id":"pair_40fd8d613d0d4e1892d2418b487940dc","name":"account","value":"test","description":""},{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1684125408150,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_56b5e8d186474d41a45b89c3c4f91c12","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1684125416042,"created":1683600767628,"url":"localhost:3001/v0/project/corporate-docs","name":"Patch Project","description":"","method":"PATCH","body":{"mimeType":"application/json","text":"{\n\t\"name\": \"Corpodocs\",\n\t\"id\": \"my-docs-site\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_a1014b53668b4f008a51d5b8d4ce4d6b"},{"id":"pair_23391f2d582b4e2a8e79dfd2fa324f0c","name":"account","value":"test","description":""}],"authentication":{},"metaSortKey":-1683600767628,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1c5ffaa69e234aa38231775681a69b51","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1683600752789,"created":1683600722721,"url":"localhost:3001/v0/project/corporate-docs","name":"Get Specific Project","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_79268c0a0813470884670edea8328874","name":"account","value":"test","description":""}],"authentication":{},"metaSortKey":-1683600722721,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5328857a6e604609996339fe27e81e16","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1685397560331,"created":1683600384108,"url":"localhost:3001/v0/project","name":"Get All Projects","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_6fd210dec4d84dc59a3e76d7e4475916","name":"account","value":"test","description":""},{"id":"pair_b9ba3fe55173465aa1bab69444f10f1f","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1683600384108,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_acf594e56cbd437c9aa8b6b4621c1a72","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1683600704643,"created":1683589659496,"url":"localhost:3001/v0/project","name":"Create Project","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"id\": \"corporate-docs\",\n\t\"name\": \"Documentation Site\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_93a1b8beafd94dc9a2f58e183d3f00cd"},{"id":"pair_0e8ae8029e0d49ff89eea9c4d0ad2d2d","name":"account","value":"test","description":""},{"id":"pair_7fc0ebf36e8547e3baa56c3405b9a6fe","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1683589659496,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ccaf4a2780df42fcb1f4149f0f99198a","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1682643800708,"created":1682643757750,"url":"localhost:3001/v0/account","name":"Get Account Info","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_a3f4cab52dde48239278cb3e240aadc1","name":"account","value":"my-second-account","description":""}],"authentication":{},"metaSortKey":-1682643757750,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9887bd17b52b49aa95db8de337dc93d5","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1682643310958,"created":1682570050916,"url":"localhost:3001/v0/account","name":"Create Account","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"id\": \"my-second-account\",\n\t\"name\": \"Second Account\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"id":"pair_d9d5df7b8085436fa9bed974cbcad3a7","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1682570050916,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e0eee40e21ee4583b6f0f3581d5ad5b2","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1682570046573,"created":1681892679550,"url":"http://localhost:3000/v0/project","name":"Create Project","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"id\": \"my-first-pod\",\n\t\"name\": \"Company Blog\",\n\t\"image\": \"wordpress\",\n\t\"tag\": \"latest\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681892679550,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_3d7568a01345ad928a13d38fbb00bff18308a4b8","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1681892679548,"created":1681892679548,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1681892679548,"_type":"environment"},{"_id":"jar_3d7568a01345ad928a13d38fbb00bff18308a4b8","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1681892679549,"created":1681892679549,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_5ae012efbf1a4611a2f426822b15d82e","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1700274038403,"created":1681892760291,"fileName":"Podinate","contents":"openapi: 3.0.0\ninfo:\n  description: The API for the simple containerisation solution Podinate. Login should be performed over oauth from [auth.podinate.com](https://auth.podinate.com)\n  title: Podinate API\n  version: 0.0.1\nservers:\n- description: Main (production) server\n  url: https://api.podinate.com/v0\n- description: Internal staging server for testing\n  url: http://staging-api.example.com\ntags:\n- name: Account\n  description: Operations about accounts - accounts hold your resources and allow different users to have different permissions to them\n- name: Project\n  description: Operations related to your projects - projects are a distcint group of resources related to a single application or service\n- name: Pod\n  description: Operations related to pods - Pods are a group of containers with the same lifecycle, and are the basic unit of deployment on Podinate\n- name: User\n  description: Operations related to users - users are the people who use Podinate, and can have different permissions to different accounts\npaths:\n  /account:\n    get:\n      summary: Get information about the current account.\n      description: Accounts are logically separate, distinct containers for different customers or teams. For example you might have an account for your marketing and product teams, or you might have an account for each client to separate their workloads. Accounts can have their own security settings applied.\n      tags:\n      - Account\n      parameters:\n        - $ref: '#/components/parameters/account'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n          description: Information about the given account\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"409\":\n          $ref: \"#/components/responses/409Error\"\n    post:\n      summary: Create a new account\n      description: Create a new logically separate account, for example for a given client or team.\n      tags:\n      - Account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Account'\n      responses:\n        \"201\":\n          description: Account created successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n    patch:\n      summary: Update an existing account\n      description: Update an existing account, for example to change the display name\n      tags:\n      - Account\n      parameters:\n      - $ref: '#/components/parameters/account'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Account'\n      responses:\n        \"200\":\n          description: Account updated successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n          description: The server was not able to update your account\n    delete:\n      summary: Delete the account and all associated resources!\n      description: Deletes the account and all associated resources! This is irreversible and may be used for example when a client project has finished or a migration is complete. \n      tags:\n      - Account\n      parameters:\n      - $ref: '#/components/parameters/account'\n      responses:\n        \"202\":\n          description: Podinate receieved your request to delete the account - it will be processed in the background. \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n\n        \n  /project:\n    get:\n      summary: Returns a list of projects.\n      description: Projects are a container for individual resources. For example the my-cool-blog project might contain a pod running a Wordpress image, a Postgres Neon database, and a bucket for storing uploads.\n      tags:\n      - Project\n      parameters:\n        - $ref: '#/components/parameters/account'\n        - in: query\n          name: page\n          schema:\n            type: integer\n            default: 0\n          description: The page number to return (starts at 0)\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            default: 20\n          description: The amount of items to return per page\n          # example: 10\n          \n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                  -  $ref: '#/components/schemas/Project'\n          description: A JSON array of projects\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n      \n    post:\n      summary: Create a new project\n      description: Creating a new project\n      tags:\n      - Project\n      parameters:\n        - $ref: '#/components/parameters/account'\n        \n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Project'\n        description: A JSON object containing the information needed to create a new\n          project\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n          description: The project was created successfully\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n  /project/{id}:\n    get:\n      summary: Get an existing project given by ID\n      description: Allows you to see an existing project's configuration\n      tags:\n      - Project\n      parameters:\n      - explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          description: The project to look at\n          example: hello-world\n          type: string\n        style: simple\n      - $ref: '#/components/parameters/account'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n          description: \"The was updated successfully, and returned the updated project\\\n            \\ information\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n    patch:\n      summary: Update an existing project\n      description: \"Allows you to update or edit an existing project. For example,\\\n        \\ you can update the tag to deploy when you have made and pushed a new build,\\\n        \\ or change the image to run entirely.\"\n      tags:\n      - Project\n      parameters:\n      - explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          description: The project to look at\n          example: hello-world\n          type: string\n        style: simple\n      - $ref: '#/components/parameters/account'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Project'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n          description: \"The was updated successfully, and returned the updated project\\\n            \\ information\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n    delete:\n      summary: Delete an existing project\n      description: \"Allows you to delete an existing project. This will delete all\\\n        \\ associated resources, and is irreversible. Use with caution!\"\n      tags:\n      - Project\n      parameters:\n      - explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          description: The project to look at\n          example: hello-world\n          type: string\n        style: simple\n      - $ref: '#/components/parameters/account'\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n          description: We received your request to delete the project, it will be processed in the background. \n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n\n  /project/{project_id}/pod:\n    get:\n      summary: Get a list of pods for a given project\n      description: \"Returns a list of pods for a given project. Pods are the individual\\\n        \\ running instances of a project, and are the smallest unit of deployment.\\\n        \\ For example, a project might have a pod running a Wordpress image, a Postgres\\\n        \\ Neon database, and a bucket for storing uploads.\"\n      tags:\n      - Pod\n      parameters:\n      # Pagination parameters\n      - in: query\n        name: page\n        schema:\n          type: integer\n          default: 0\n        description: The page number to return (starts at 0)\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          default: 20\n        description: The amount of items to return per page\n        # example: 10\n\n      - explode: false\n        in: path\n        name: project_id\n        required: true\n        schema:\n          description: The project to look at\n          example: hello-world\n          type: string\n        style: simple\n      - $ref: '#/components/parameters/account'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                  - $ref: '#/components/schemas/Pod'\n          description: A JSON array of pods\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        # Add conflict\n    post:\n      summary: Create a new pod\n      description: Creating a new pod\n      tags:\n      - Pod\n      parameters:\n      - explode: false\n        in: path\n        name: project_id\n        required: true\n        schema:\n          description: The project to look at\n          example: hello-world\n          type: string\n        style: simple\n      - $ref: '#/components/parameters/account'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pod'\n        description: A JSON object containing the information needed to create a new\n          pod\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pod'\n          description: The pod was created successfully\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n  /project/{project_id}/pod/{pod_id}:\n    get:\n      summary: Get a pod by ID\n      description: Get a pod by ID\n      tags:\n      - Pod\n      parameters:\n      - explode: false\n        in: path\n        name: project_id\n        required: true\n        schema:\n          description: The project to look at\n          example: hello-world\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: pod_id\n        required: true\n        schema:\n          description: The pod to look at\n          example: hello-world\n          type: string\n        style: simple\n      - $ref: '#/components/parameters/account'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pod'\n          description: An array of pods\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n    patch:\n      summary: Update a pod\n      description: Update a pod\n      tags:\n      - Pod\n      parameters:\n      - explode: false\n        in: path\n        name: project_id\n        required: true\n        schema:\n          description: The project to look at\n          example: hello-world\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: pod_id\n        required: true\n        schema:\n          description: The pod to look at\n          example: hello-world\n          type: string\n        style: simple\n      - $ref: '#/components/parameters/account'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pod'\n        description: A JSON object containing the information needed to update a pod\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pod'\n          description: The pod was updated successfully\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n    delete:\n      summary: Delete a pod\n      description: Delete a pod\n      tags:\n      - Pod\n      parameters:\n      - explode: false\n        in: path\n        name: project_id\n        required: true\n        schema:\n          description: The project to look at\n          example: hello-world\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: pod_id\n        required: true\n        schema:\n          description: The pod to look at\n          example: hello-world\n          type: string\n        style: simple\n      - $ref: '#/components/parameters/account'\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pod'\n          description: We received your request to delete the pod, it will be processed in the background. \n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n  \n  /user/login/initiate:\n    get:\n      summary: Get a login URL\n      description: Get a login URL, which will redirect the user to the oauth provider to complete the login flow. To complete a full login, you should then call /user/login/complete with the token returned by this endpoint.\n      tags:\n      - User\n      parameters: \n        - in: query\n          name: provider\n          schema:\n            type: string\n            example: github\n          description: The oauth provider to use. Valid options will be github / gitlab / podinate, during alpha only podinate is allowed. \n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  url:\n                    type: string\n                    description: The URL to redirect the user to\n                    example: https://auth.podinate.com/login?state=1234&client_id=1234&redirect_uri=https://api.podinate.com/v0/user/login/callback\n                  token:\n                    type: string\n                    description: The token to use to get the user's actual API key once they have completed the oauth flow\n                    example: abc1234\n          description: A redirect URL to send the user to to complete the login flow, and a token to use to get the user's actual API key once they have completed the oauth flow\n\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n  \n  /user/login/complete:\n    get:\n      summary: Complete a user login\n      description: Complete a user login and swap the given login token for an API key\n      tags:\n      - User\n      parameters: \n        - in: query\n          name: token\n          schema:\n            type: string\n            example: abc1234\n          description: The token given by /user/login/init to get the user's actual API key once they have completed the oauth flow\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  logged_in:\n                    type: boolean\n                    description: Whether the user is logged in or not\n                    example: true\n                  api_key:\n                    type: string\n                    description: The user's API key, if they are logged in\n                    example: abc1234\n          description: An array of pods\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n\n  /user/login/callback/{provider}: \n    get:\n      summary: User login callback URL for oauth providers\n      description: This API endpoint is not intended to be accessed directly. It is used as the callback URL for oauth providers, and will redirect the user to the correct place once they have completed the login flow.\n      tags:\n      - User\n      parameters: \n        - in: path\n          required: true\n          name: provider\n          schema:\n            type: string\n            example: github\n          description: The oauth provider to use. Valid options will be github / gitlab / podinate, during alpha only podinate is allowed. \n      responses:\n        \"200\":\n          content:\n            text/html: \n              schema:\n                type: string\n                example: You have successfully logged in. Closing this window in 3 seconds...\n          description: An array of pods\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n  \n  /user/login/redirect/{token}: \n    get:\n      summary: User login redirect URL to oauth providers\n      description: This API endpoint is not intended to be called directly. It is used as the redirect URL for oauth providers, and will redirect the user to the correct place once they have completed the login flow.\n      tags:\n      - User\n      parameters: \n        - in: path\n          required: true\n          name: token\n          schema:\n            type: string\n            example: abc1234\n          description: The token given by /user/login/init to get the user's actual API key once they have completed the oauth flow\n      responses:\n        \"200\":\n          content:\n            text/html: \n              schema:\n                type: string\n                example: You should be redirected automatically. If not click here.\n          description: An array of pods\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n\n  /user:\n    get:\n      summary: Get the current user\n      description: Get the current user\n      tags:\n      - User\n      parameters: \n        - $ref: '#/components/parameters/account'\n      responses:\n        \"200\":\n          description: The user was returned successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The user's ID\n                    example: abc1234\n                  email:\n                    type: string\n                    description: The user's email address\n                    example: test@example.com\n        \"204\":\n          description: No user is logged in\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"404\":\n          $ref: \"#/components/responses/404Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n\n\ncomponents:\n  parameters:\n    account:\n      description: The account to use for the request\n      example: my-account\n      explode: false\n      in: header\n      name: account\n      required: true\n      schema:\n        type: string\n      style: simple\n    project_id:\n      explode: false\n      in: path\n      name: id\n      required: true\n      schema:\n        description: The project to look at\n        example: hello-world\n        type: string\n      style: simple\n    # offset:\n    #   in: query\n    #   description: The offset to use for pagination\n    #   explode: false\n    #   name: offset\n    #   required: true\n    #   schema:\n    #     description: The offset to use for pagination\n    #     type: integer\n    #     default: 0\n    #   example: 0 \n    #   style: simple\n    \n  responses:\n    \"400Error\":\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: \"Request issued incorrectly, for example missing parameters or\\\n        \\ wrong endpoint\"\n    \"404Error\":\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: \"The requested resource was not found\"\n    \"500Error\":\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: An internal server error\n    \"409Error\":\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: \"The request could not be completed due to a conflict with the\\\n        \\ current state of the resource\"\n    \n  schemas:\n    Account:\n      example:\n        id: \"blog-prod\"\n        name: \"Company Blog - Prod\"\n      properties:\n        id:\n          description: The short name (slug/url) of the account. The account ID is globally unique and cannot be changed.\n          example: \"blog-prod\"\n          type: string \n        name:\n          description: The human readable name of the account, used for display purposes.\n          example: \"Tim's Widgets Company Blog - Prod\"\n          type: string\n    Project:\n      example:\n        image: wordpress\n        name: Hello World\n        id: hello-world\n        tag: \"6.0\"\n      properties:\n        id:\n          description: The short name (slug/url) of the project\n          example: hello-world\n          type: string\n        name:\n          description: The name of the app\n          example: Hello World\n          type: string\n        image:\n          description: The container image to run for this app\n          example: wordpress\n          type: string\n        tag:\n          description: The image tag to run for this app\n          example: \"6.0\"\n          type: string\n      type: object\n    Pod:\n      example:\n        id: hello-world\n        name: Hello World\n        image: wordpress\n        tag: \"6.0\"\n        status: running\n        created_at: \"2020-01-01T00:00:00Z\"\n      properties:\n        id:\n          description: The short name (slug/url) of the pod\n          example: hello-world\n          type: string\n        name:\n          description: The name of the pod\n          example: Hello World\n          type: string\n        image:\n          description: The container image to run for this pod\n          example: wordpress\n          type: string\n        tag:\n          description: The image tag to run for this pod\n          example: \"6.0\"\n          type: string\n        status:\n          description: The current status of the pod\n          example: running\n          type: string\n        created_at:\n          description: The date and time the pod was created\n          example: \"2020-01-01T00:00:00Z\"\n          type: string\n      type: object\n    \"Error\":\n      properties:\n        code:\n          default: 400\n          description: The http code of the error message (400)\n          example: 400\n          type: number\n        message:\n          description: The human-readable description of what went wrong\n          example: Missing required parameter 'account'\n          type: string\n      type: object\n  ","contentType":"yaml","_type":"api_spec"},{"_id":"uts_3f3b5c3e174f46e99f4931672c1a2e5a","parentId":"wrk_b2acac34f5d14a8ba7d5c2ffeaf7aea8","modified":1681892679551,"created":1681892679551,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"env_fe78c5ca0851449b8a576fd2036f47f4","parentId":"env_3d7568a01345ad928a13d38fbb00bff18308a4b8","modified":1700277641060,"created":1681892697149,"name":"Podinate","data":{"http_host":"http://localhost:3001/","base_path":"{{ _.http_host }}v0/","api_key":"{% response 'body', '', '', 'never', 60 %}"},"dataPropertyOrder":{"&":["http_host","base_path","api_key"]},"color":"#8b22c3","isPrivate":false,"metaSortKey":1681892697149,"_type":"environment"},{"_id":"ut_83d3090873b3428b88c810bc1e8a3530","parentId":"uts_3f3b5c3e174f46e99f4931672c1a2e5a","modified":1700274084939,"created":1700274084939,"requestId":null,"name":"Returns 200","code":"const response1 = await insomnia.send();\nexpect(response1.status).to.equal(200);","_type":"unit_test"}]}