/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// SharedVolume - A shared volume is a storage volume that can be shared by multiple pods to store data.
type SharedVolume struct {

	// The short name (slug/url) of the shared volume
	Id string `json:"id"`

	// The name of the shared volume
	Name string `json:"name,omitempty"`

	// The size of the shared volume in GB
	Size int32 `json:"size"`

	// The class of the shared volume, for example \"standard\" or \"premium\"
	Class string `json:"class,omitempty"`

	// The global Resource ID of the shared volume
	ResourceId string `json:"resource_id,omitempty"`
}

// AssertSharedVolumeRequired checks if the required fields are not zero-ed
func AssertSharedVolumeRequired(obj SharedVolume) error {
	elements := map[string]interface{}{
		"id":   obj.Id,
		"size": obj.Size,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseSharedVolumeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SharedVolume (e.g. [][]SharedVolume), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSharedVolumeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSharedVolume, ok := obj.(SharedVolume)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSharedVolumeRequired(aSharedVolume)
	})
}
