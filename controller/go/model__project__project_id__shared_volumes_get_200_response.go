/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ProjectProjectIdSharedVolumesGet200Response struct {
	Items []SharedVolume `json:"items,omitempty"`

	// The total number of shared volumes
	Total int32 `json:"total"`

	// The current page number
	Page int32 `json:"page"`

	// The number of items per page
	Limit int32 `json:"limit"`
}

// AssertProjectProjectIdSharedVolumesGet200ResponseRequired checks if the required fields are not zero-ed
func AssertProjectProjectIdSharedVolumesGet200ResponseRequired(obj ProjectProjectIdSharedVolumesGet200Response) error {
	elements := map[string]interface{}{
		"total": obj.Total,
		"page":  obj.Page,
		"limit": obj.Limit,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertSharedVolumeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseProjectProjectIdSharedVolumesGet200ResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ProjectProjectIdSharedVolumesGet200Response (e.g. [][]ProjectProjectIdSharedVolumesGet200Response), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseProjectProjectIdSharedVolumesGet200ResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aProjectProjectIdSharedVolumesGet200Response, ok := obj.(ProjectProjectIdSharedVolumesGet200Response)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertProjectProjectIdSharedVolumesGet200ResponseRequired(aProjectProjectIdSharedVolumesGet200Response)
	})
}
