/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ProjectProjectIdPodGet200Response struct {

	Items []ProjectProjectIdPodGet200ResponseItemsInner `json:"items,omitempty"`

	// The total number of pods
	Total int32 `json:"total,omitempty"`

	// The current page number
	Page int32 `json:"page,omitempty"`

	// The number of items per page
	Limit int32 `json:"limit,omitempty"`
}

// AssertProjectProjectIdPodGet200ResponseRequired checks if the required fields are not zero-ed
func AssertProjectProjectIdPodGet200ResponseRequired(obj ProjectProjectIdPodGet200Response) error {
	for _, el := range obj.Items {
		if err := AssertProjectProjectIdPodGet200ResponseItemsInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseProjectProjectIdPodGet200ResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ProjectProjectIdPodGet200Response (e.g. [][]ProjectProjectIdPodGet200Response), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseProjectProjectIdPodGet200ResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aProjectProjectIdPodGet200Response, ok := obj.(ProjectProjectIdPodGet200Response)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertProjectProjectIdPodGet200ResponseRequired(aProjectProjectIdPodGet200Response)
	})
}
