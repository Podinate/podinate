openapi: 3.0.0
info:
  description: The API for the simple containerisation solution Podinate. Login should be performed over oauth from [auth.podinate.com](https://auth.podinate.com)
  title: Podinate API
  version: 0.0.1
servers:
- description: Main (production) server
  url: https://api.podinate.com/v0
- description: Internal staging server for testing
  url: http://staging-api.example.com
tags:
- name: Account
  description: Operations about accounts - accounts hold your resources and allow different users to have different permissions to them
- name: Project
  description: Operations related to your projects - projects are a distcint group of resources related to a single application or service
- name: Pod
  description: Operations related to pods - Pods are a group of containers with the same lifecycle, and are the basic unit of deployment on Podinate
paths:
  /account:
    get:
      summary: Get information about the current account.
      description: Accounts are logically separate, distinct containers for different customers or teams. For example you might have an account for your marketing and product teams, or you might have an account for each client to separate their workloads. Accounts can have their own security settings applied.
      tags:
      - Account
      parameters:
        - $ref: '#/components/parameters/account'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Information about the given account
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
        "409":
          $ref: "#/components/responses/409Error"
    post:
      summary: Create a new account
      description: Create a new logically separate account, for example for a given client or team.
      tags:
      - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"
    patch:
      summary: Update an existing account
      description: Update an existing account, for example to change the display name
      tags:
      - Account
      parameters:
      - $ref: '#/components/parameters/account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        "200":
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"
          description: The server was not able to update your account
    delete:
      summary: Delete the account and all associated resources!
      description: Deletes the account and all associated resources! This is irreversible and may be used for example when a client project has finished or a migration is complete. 
      tags:
      - Account
      parameters:
      - $ref: '#/components/parameters/account'
      responses:
        "202":
          description: Podinate receieved your request to delete the account - it will be processed in the background. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"

        
  /project:
    get:
      summary: Returns a list of projects.
      description: Projects are a container for individual resources. For example the my-cool-blog project might contain a pod running a Wordpress image, a Postgres Neon database, and a bucket for storing uploads.
      tags:
      - Project
      parameters:
        - $ref: '#/components/parameters/account'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to return (starts at 0)
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: The amount of items to return per page
          # example: 10
          
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  -  $ref: '#/components/schemas/Project'
          description: A JSON array of projects
        "500":
          $ref: "#/components/responses/500Error"
      
    post:
      summary: Create a new project
      description: Creating a new project
      tags:
      - Project
      parameters:
        - $ref: '#/components/parameters/account'
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: A JSON object containing the information needed to create a new
          project
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: The project was created successfully
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"
  /project/{id}:
    get:
      summary: Get an existing project given by ID
      description: Allows you to see an existing project's configuration
      tags:
      - Project
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: "The was updated successfully, and returned the updated project\
            \ information"
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
    patch:
      summary: Update an existing project
      description: "Allows you to update or edit an existing project. For example,\
        \ you can update the tag to deploy when you have made and pushed a new build,\
        \ or change the image to run entirely."
      tags:
      - Project
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: "The was updated successfully, and returned the updated project\
            \ information"
        "400":
          $ref: "#/components/responses/400Error"
    delete:
      summary: Delete an existing project
      description: "Allows you to delete an existing project. This will delete all\
        \ associated resources, and is irreversible. Use with caution!"
      tags:
      - Project
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: We received your request to delete the project, it will be processed in the background. 
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"

  /project/{project_id}/pod:
    get:
      summary: Get a list of pods for a given project
      description: "Returns a list of pods for a given project. Pods are the individual\
        \ running instances of a project, and are the smallest unit of deployment.\
        \ For example, a project might have a pod running a Wordpress image, a Postgres\
        \ Neon database, and a bucket for storing uploads."
      tags:
      - Pod
      parameters:
      # Pagination parameters
      - in: query
        name: page
        schema:
          type: integer
          default: 0
        description: The page number to return (starts at 0)
      - in: query
        name: limit
        schema:
          type: integer
          default: 20
        description: The amount of items to return per page
        # example: 10

      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/Pod'
          description: A JSON array of pods
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
        # Add conflict
    post:
      summary: Create a new pod
      description: Creating a new pod
      tags:
      - Pod
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pod'
        description: A JSON object containing the information needed to create a new
          pod
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: The pod was created successfully
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"
  /project/{project_id}/pod/{pod_id}:
    get:
      summary: Get a pod by ID
      description: Get a pod by ID
      tags:
      - Pod
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: An array of pods
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
    patch:
      summary: Update a pod
      description: Update a pod
      tags:
      - Pod
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pod'
        description: A JSON object containing the information needed to update a pod
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: The pod was updated successfully
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
    delete:
      summary: Delete a pod
      description: Delete a pod
      tags:
      - Pod
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: We received your request to delete the pod, it will be processed in the background. 
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"

components:
  parameters:
    account:
      description: The account to use for the request
      example: my-account
      explode: false
      in: header
      name: account
      required: true
      schema:
        type: string
      style: simple
    project_id:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: The project to look at
        example: hello-world
        type: string
      style: simple
    # offset:
    #   in: query
    #   description: The offset to use for pagination
    #   explode: false
    #   name: offset
    #   required: true
    #   schema:
    #     description: The offset to use for pagination
    #     type: integer
    #     default: 0
    #   example: 0 
    #   style: simple
    
  responses:
    "400Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Request issued incorrectly, for example missing parameters or\
        \ wrong endpoint"
    "404Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "The requested resource was not found"
    "500Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: An internal server error
    "409Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "The request could not be completed due to a conflict with the\
        \ current state of the resource"
    
  schemas:
    Account:
      example:
        id: "blog-prod"
        name: "Company Blog - Prod"
      properties:
        id:
          description: The short name (slug/url) of the account. The account ID is globally unique and cannot be changed.
          example: "blog-prod"
          type: string 
        name:
          description: The human readable name of the account, used for display purposes.
          example: "Tim's Widgets Company Blog - Prod"
          type: string
    Project:
      example:
        image: wordpress
        name: Hello World
        id: hello-world
        tag: "6.0"
      properties:
        id:
          description: The short name (slug/url) of the project
          example: hello-world
          type: string
        name:
          description: The name of the app
          example: Hello World
          type: string
        image:
          description: The container image to run for this app
          example: wordpress
          type: string
        tag:
          description: The image tag to run for this app
          example: "6.0"
          type: string
      type: object
    Pod:
      example:
        id: hello-world
        name: Hello World
        image: wordpress
        tag: "6.0"
        status: running
        created_at: "2020-01-01T00:00:00Z"
      properties:
        id:
          description: The short name (slug/url) of the pod
          example: hello-world
          type: string
        name:
          description: The name of the pod
          example: Hello World
          type: string
        image:
          description: The container image to run for this pod
          example: wordpress
          type: string
        tag:
          description: The image tag to run for this pod
          example: "6.0"
          type: string
        status:
          description: The current status of the pod
          example: running
          type: string
        created_at:
          description: The date and time the pod was created
          example: "2020-01-01T00:00:00Z"
          type: string
      type: object
    "Error":
      properties:
        code:
          default: 400
          description: The http code of the error message (400)
          example: 400
          type: number
        message:
          description: The human-readable description of what went wrong
          example: Missing required parameter 'account'
          type: string
      type: object
  