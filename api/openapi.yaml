openapi: 3.0.0
info:
  description: The API for the simple containerisation solution Podinate.
  title: Podinate API
  version: 0.0.1
servers:
- description: Production server
  url: https://api.podinate.com/v0
- description: Development Server
  url: http://localhost:3001/v0
security:
  - APIKeyAuth: []
tags:
- name: Account
  description: Operations about accounts - accounts hold your resources and allow different users to have different permissions to them
- name: Project
  description: Operations related to your projects - projects are a distcint group of resources related to a single application or service
- name: Pod
  description: Operations related to pods - Pods are a group of containers with the same lifecycle, and are the basic unit of deployment on Podinate
- name: User
  description: |
    Operations related to users - users are the people who use Podinate, and can have different permissions to different accounts. 

    To complete a user login, you should call `/user/login/initiate` to get a login URL and token, then redirect the user to that URL. 
    Once they have completed the login flow on the provider, they will be redirected to `/user/login/callback/{provider}`. 
    You should then call `/user/login/complete` with that token to get the user's API key.
paths:
  /account:
    get:
      summary: Get information about the current account.
      description: Accounts are logically separate, distinct containers for different customers or teams. For example you might have an account for your marketing and product teams, or you might have an account for each client to separate their workloads. Accounts can have their own security settings applied.
      tags:
      - Account
      parameters:
        - $ref: '#/components/parameters/account'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Information about the given account
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
        "409":
          $ref: "#/components/responses/409Error"
    post:
      summary: Create a new account
      description: Create a new logically separate account, for example for a given client or team.
      tags:
      - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"
    patch:
      summary: Update an existing account
      description: Update an existing account, for example to change the display name
      tags:
      - Account
      parameters:
      - $ref: '#/components/parameters/account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        "200":
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"
          description: The server was not able to update your account
    delete:
      summary: Delete the account and all associated resources!
      description: Deletes the account and all associated resources! This is irreversible and may be used for example when a client project has finished or a migration is complete. 
      tags:
      - Account
      parameters:
      - $ref: '#/components/parameters/account'
      responses:
        "202":
          description: Podinate receieved your request to delete the account - it will be processed in the background. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"

        
  /project:
    get:
      summary: Returns a list of projects.
      description: Projects are a container for individual resources. For example the my-cool-blog project might contain a pod running a Wordpress image, a Postgres Neon database, and a bucket for storing uploads.
      tags:
      - Project
      parameters:
        - $ref: '#/components/parameters/account'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to return (starts at 0)
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: The amount of items to return per page
          # example: 10
          
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      oneOf:
                      - $ref: '#/components/schemas/Project'
                  total:
                    type: integer
                    description: The total number of projects
                    example: 1
                  page:
                    type: integer
                    description: The current page number
                    example: 0
                  limit:
                    type: integer
                    description: The number of items per page
                    example: 20
          description: A JSON array of projects
        "500":
          $ref: "#/components/responses/500Error"
      
    post:
      summary: Create a new project
      description: Creating a new project
      x-speakeasy-entity-operation: Project#create
      tags:
      - Project
      parameters:
        - $ref: '#/components/parameters/account'
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: A JSON object containing the information needed to create a new
          project
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: The project was created successfully
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"
  /project/{id}:
    get:
      summary: Get an existing project given by ID
      description: Allows you to see an existing project's configuration
      x-speakeasy-entity-operation: Project#get
      tags:
      - Project
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: "The was updated successfully, and returned the updated project\
            \ information"
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
    patch:
      summary: Update an existing project
      description: "Allows you to update or edit an existing project. For example,\
        \ you can update the tag to deploy when you have made and pushed a new build,\
        \ or change the image to run entirely."
      x-speakeasy-entity-operation: Project#update
      tags:
      - Project
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: "The was updated successfully, and returned the updated project\
            \ information"
        "400":
          $ref: "#/components/responses/400Error"
    delete:
      summary: Delete an existing project
      description: "Allows you to delete an existing project. This will delete all\
        \ associated resources, and is irreversible. Use with caution!"
      x-speakeasy-entity-operation: Project#delete
      tags:
      - Project
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      responses:
        "202":
          description: We received your request to delete the project, it will be processed in the background. 
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"

  /project/{project_id}/pod:
    get:
      summary: Get a list of pods for a given project
      description: "Returns a list of pods for a given project. Pods are the individual\
        \ running instances of a project, and are the smallest unit of deployment.\
        \ For example, a project might have a pod running a Wordpress image, a Postgres\
        \ Neon database, and a bucket for storing uploads."
      tags:
      - Pod
      #x-speakeasy-entity-operation: Pod#get
      parameters:
      # Pagination parameters
      - in: query
        name: page
        schema:
          type: integer
          default: 0
        description: The page number to return (starts at 0)
      - in: query
        name: limit
        schema:
          type: integer
          default: 20
        description: The amount of items to return per page
        # example: 10

      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      oneOf:
                      - $ref: '#/components/schemas/Pod'
                  total:
                    type: integer
                    description: The total number of pods
                    example: 1
                  page:
                    type: integer
                    description: The current page number
                    example: 0
                  limit:
                    type: integer
                    description: The number of items per page
                    example: 20
                required:
                - total
                - page
                - limit
          #       type: array
          #       items:
          #         oneOf:
          #         - $ref: '#/components/schemas/Pod'
          description: A JSON array of pods
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
        # Add conflict
    post:
      summary: Create a new pod
      description: Creating a new pod
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#create
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - $ref: '#/components/parameters/account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pod'
        description: A JSON object containing the information needed to create a new
          pod
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: The pod was created successfully
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"
  /project/{project_id}/pod/{pod_id}:
    get:
      summary: Get a pod by ID
      description: Get a pod by ID
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#get
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
        x-speakeasy-match: id
      - $ref: '#/components/parameters/account'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: An array of pods
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
    patch:
      summary: Update a pod
      description: Update a pod
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#update
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
        x-speakeasy-match: id
      - $ref: '#/components/parameters/account'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pod'
        description: A JSON object containing the information needed to update a pod
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: The pod was updated successfully
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
    delete:
      summary: Delete a pod
      description: Delete a pod
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#delete
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
        x-speakeasy-match: id
      - $ref: '#/components/parameters/account'
      responses:
        "202":
          description: We received your request to delete the pod, it will be processed in the background. 
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
  
  /user/login/initiate:
    get:
      summary: Get a login URL
      description: Get a login URL, which will redirect the user to the oauth provider to complete the login flow. To complete a full login, you should then call /user/login/complete with the token returned by this endpoint.
      tags:
      - User
      # No security on this endpoint as it's related to logging in
      security: []
      parameters: 
        - in: query
          name: provider
          schema:
            type: string
            example: github
          description: The oauth provider to use. Valid options will be github / gitlab / podinate, during alpha only podinate is allowed. 
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The URL to redirect the user to
                    example: https://auth.podinate.com/login?state=1234&client_id=1234&redirect_uri=https://api.podinate.com/v0/user/login/callback
                  token:
                    type: string
                    description: The token to use to get the user's actual API key once they have completed the oauth flow
                    example: abc1234
          description: A redirect URL to send the user to to complete the login flow, and a token to use to get the user's actual API key once they have completed the oauth flow

        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"

  /user/login/redirect/{token}: 
    get:
      summary: User login redirect URL to oauth providers
      description: This API endpoint is not intended to be called directly. It is used as the redirect URL for oauth providers, and will redirect the user to the correct place once they have completed the login flow.
      tags:
      - User
      # No security on this endpoint as it's related to logging in
      security: []
      parameters: 
        - in: path
          required: true
          name: token
          schema:
            type: string
            example: abc1234
          description: The token given by /user/login/init to get the user's actual API key once they have completed the oauth flow
      responses:
        "200":
          content:
            text/html: 
              schema:
                type: string
                example: You should be redirected automatically. If not click here.
          description: An array of pods
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"

  /user/login/callback/{provider}: 
    get:
      summary: User login callback URL for oauth providers
      description: This API endpoint is not intended to be accessed directly. It is used as the callback URL for oauth providers, and will redirect the user to the correct place once they have completed the login flow.
      tags:
      - User
      security: []
      parameters: 
        - in: path
          required: true
          name: provider
          schema:
            type: string
            example: github
          description: The oauth provider to use. Valid options will be github / gitlab / podinate, during alpha only podinate is allowed. 
      responses:
        "200":
          content:
            text/html: 
              schema:
                type: string
                example: You have successfully logged in. Closing this window in 3 seconds...
          description: An array of pods
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"

  /user/login/complete:
    get:
      summary: Complete a user login
      description: Complete a user login and swap the given login token for an API key
      tags:
      - User
      # No security on this endpoint as it's related to logging in
      security: []
      parameters: 
        - in: query
          name: token
          schema:
            type: string
            example: abc1234
          description: The token given by /user/login/init to get the user's actual API key once they have completed the oauth flow
        - in: query
          name: client
          schema:
            type: string
            example: "Podinate CLI on James' Macbook Pro"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  logged_in:
                    type: boolean
                    description: Whether the user is logged in or not
                    example: true
                  api_key:
                    type: string
                    description: The user's API key, if they are logged in
                    example: abc1234
          description: An array of pods
        "204":
          description: The login is still in progress, check back soon
        "400":
          $ref: "#/components/responses/400Error"
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid login session token
          
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"
  
  

  /user:
    get:
      summary: Get the current user
      description: Get the current user
      tags:
      - User
      responses:
        "200":
          description: The user was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "204":
          description: No user is logged in
        "400":
          $ref: "#/components/responses/400Error"
        "404":
          $ref: "#/components/responses/404Error"
        "500":
          $ref: "#/components/responses/500Error"


components:
  securitySchemes:
    APIKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  parameters:
    account:
      description: The account to use for the request
      example: my-account
      explode: false
      in: header
      name: account
      required: true
      schema:
        type: string
      style: simple
    project_id:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: The project to look at
        example: hello-world
        type: string
      style: simple
    # offset:
    #   in: query
    #   description: The offset to use for pagination
    #   explode: false
    #   name: offset
    #   required: true
    #   schema:
    #     description: The offset to use for pagination
    #     type: integer
    #     default: 0
    #   example: 0 
    #   style: simple
    
  responses:
    "400Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Request issued incorrectly, for example missing parameters or\
        \ wrong endpoint"
    "404Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "The requested resource was not found"
    "500Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: An internal server error
    "409Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "The request could not be completed due to a conflict with the\
        \ current state of the resource"
    
  schemas:
    Account:
      example:
        id: "blog-prod"
        name: "Company Blog - Prod"
      properties:
        id:
          description: The short name (slug/url) of the account. The account ID is globally unique and cannot be changed.
          example: "blog-prod"
          type: string 
        name:
          description: The human readable name of the account, used for display purposes.
          example: "Tim's Widgets Company Blog - Prod"
          type: string
        resource_id:
          description: The global Resource ID of the account
          example: account:podinate-blog-prod
          type: string
          x-speakeasy-param-readonly: true
    Project:
      description: A project is a container for individual resources. For example the my-cool-blog project might contain a pod running a Wordpress image, a Postgres Neon database, and a bucket for storing uploads.
      x-speakeasy-entity: Project
      example:
        image: wordpress
        name: Hello World
        id: hello-world
        tag: "6.0"
      properties:
        id:
          description: The short name (slug/url) of the project
          example: hello-world
          type: string
        name:
          description: The name of the app
          example: Hello World
          type: string
        resource_id:
          description: The global Resource ID of the project
          example: account:podinate/project:hello-world
          type: string
          x-speakeasy-param-readonly: true
        # image:
        #   description: The container image to run for this app
        #   example: wordpress
        #   type: string
        # tag:
        #   description: The image tag to run for this app
        #   example: "6.0"
        #   type: string
      type: object
    Pod:
      description: A pod is a group of containers with the same lifecycle, and are the basic unit of deployment on Podinate
      x-speakeasy-entity: Pod
      example:
        id: hello-world
        name: Hello World
        image: wordpress
        tag: "6.0"
        status: running
        created_at: "2020-01-01T00:00:00Z"
        resource_id: account:podinate/project:super-cool-app/pod:hello-world
        environment:
          - key: DB_PASSWORD
            value: "abc1234"
            secret: true
        services:
          - name: my-blog
            port: 80
            protocol: http
            domain_name: my-blog.podinate.app
      properties:
        id:
          description: The short name (slug/url) of the pod
          example: hello-world
          type: string
        name:
          description: The name of the pod
          example: Hello World
          type: string
        image:
          description: The container image to run for this pod
          example: wordpress
          type: string
        tag:
          description: The image tag to run for this pod
          example: "6.0"
          type: string
        # cluster:
        #   description: The cluster to run this pod on
        #   example: "nz-1"
        #   type: string
        status:
          description: The current status of the pod
          example: running
          type: string
          x-speakeasy-param-readonly: true
        created_at:
          description: The date and time the pod was created
          example: "2020-01-01T00:00:00Z"
          type: string
          x-speakeasy-param-readonly: true
        resource_id:
          description: The global Resource ID of the pod
          example: account:podinate/project:hello-world/pod:my-blog
          type: string
          x-speakeasy-param-readonly: true
        environment:
          description: The environment variables to pass to the pod
          example:
            - key: DB_PASSWORD
              value: "abc1234"
              secret: true
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
        services:
          description: The services to expose for this pod
          example:
            - name: my-blog
              port: 80
              protocol: http
              domain_name: my-blog.podinate.app
          type: array
          items:
            $ref: '#/components/schemas/Service'
      type: object
      required:
        - name
        - image
        - tag

    EnvironmentVariable:
      description: An environment variable is a key-value pair that is passed to the container when it is run. 
      example:
        key: DB_PASSWORD
        value: "abc1234"
      properties:
        key:
          description: The key of the environment variable
          example: DB_PASSWORD
          type: string
        value:
          description: The value of the environment variable
          example: "abc1234"
          type: string
        secret:
          description: Whether the value of the environment variable is a secret or not. If it is a secret, it will not be returned in the API response. 
          example: true
          type: boolean
      required:
      - key
      - value
      type: object
    Service:
      description: A service makes a Pod available to other Pods or to the internet
      properties:
        name:
          description: The hostname of the service
          example: "my-blog"
          type: string
        port:
          description: The port to expose the service on
          example: 80
          type: integer
        targetPort:
          description: The port to forward traffic to, if different from the port. Can be left blank if the same as the port. 
          example: 80
          type: integer
        protocol:
          description: The protocol to use for the service. Either http, tcp or udp. 
          example: http
          type: string
        domain_name: 
          description: The domain name to use for the service. If left blank, the service will only be available internally. If set, the service will be available externally at the given domain name.
          example: my-blog.podinate.app
          type: string
      required:
        - name
        - port
        - protocol

    
    User:
      example:
        resource_id: user:podinate:mike
        email: mike@example.com
        display_name: Michael Jones
        avatar_url: https://avatars.githubusercontent.com/u/1234?v=4
      properties:
        resource_id: 
          description: The global Resource ID of the user
          example: user:podinate:mike
          type: string
        email:
          description: The user's email address
          example: mike@example.com
          type: string
        display_name: 
          description: The user's display name
          example: Michael Bolton
          type: string
        avatar_url:
          description: The URL of the user's avatar
          example: https://avatars.githubusercontent.com/u/1234?v=4
          type: string

        
    "Error":
      properties:
        code:
          default: 400
          description: The http code of the error message (400)
          example: 400
          type: number
        message:
          description: The human-readable description of what went wrong
          example: Missing required parameter 'account'
          type: string
      type: object
  