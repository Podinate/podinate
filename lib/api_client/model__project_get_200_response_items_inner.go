/*
Podinate API

The API for the simple containerisation solution Podinate.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"fmt"
)

// ProjectGet200ResponseItemsInner - struct for ProjectGet200ResponseItemsInner
type ProjectGet200ResponseItemsInner struct {
	Project *Project
}

// ProjectAsProjectGet200ResponseItemsInner is a convenience function that returns Project wrapped in ProjectGet200ResponseItemsInner
func ProjectAsProjectGet200ResponseItemsInner(v *Project) ProjectGet200ResponseItemsInner {
	return ProjectGet200ResponseItemsInner{
		Project: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProjectGet200ResponseItemsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Project
	err = newStrictDecoder(data).Decode(&dst.Project)
	if err == nil {
		jsonProject, _ := json.Marshal(dst.Project)
		if string(jsonProject) == "{}" { // empty struct
			dst.Project = nil
		} else {
			match++
		}
	} else {
		dst.Project = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Project = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProjectGet200ResponseItemsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProjectGet200ResponseItemsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProjectGet200ResponseItemsInner) MarshalJSON() ([]byte, error) {
	if src.Project != nil {
		return json.Marshal(&src.Project)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProjectGet200ResponseItemsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Project != nil {
		return obj.Project
	}

	// all schemas are nil
	return nil
}

type NullableProjectGet200ResponseItemsInner struct {
	value *ProjectGet200ResponseItemsInner
	isSet bool
}

func (v NullableProjectGet200ResponseItemsInner) Get() *ProjectGet200ResponseItemsInner {
	return v.value
}

func (v *NullableProjectGet200ResponseItemsInner) Set(val *ProjectGet200ResponseItemsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectGet200ResponseItemsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectGet200ResponseItemsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectGet200ResponseItemsInner(val *ProjectGet200ResponseItemsInner) *NullableProjectGet200ResponseItemsInner {
	return &NullableProjectGet200ResponseItemsInner{value: val, isSet: true}
}

func (v NullableProjectGet200ResponseItemsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectGet200ResponseItemsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
