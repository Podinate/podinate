// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/podinate/terraform-provider-podinate/internal/sdk/pkg/models/shared"
	"github.com/podinate/terraform-provider-podinate/internal/sdk/pkg/utils"
	"net/http"
)

type GetProjectProjectIDPodRequest struct {
	ProjectID string `pathParam:"style=simple,explode=false,name=project_id"`
	// The page number to return (starts at 0)
	Page *int64 `default:"0" queryParam:"style=form,explode=true,name=page"`
	// The amount of items to return per page
	Limit *int64 `default:"20" queryParam:"style=form,explode=true,name=limit"`
	// The account to use for the request
	Account string `header:"style=simple,explode=false,name=account"`
}

func (g GetProjectProjectIDPodRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetProjectProjectIDPodRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetProjectProjectIDPodRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetProjectProjectIDPodRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetProjectProjectIDPodRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectProjectIDPodRequest) GetAccount() string {
	if o == nil {
		return ""
	}
	return o.Account
}

type GetProjectProjectIDPodResponseBodyType string

const (
	GetProjectProjectIDPodResponseBodyTypePod GetProjectProjectIDPodResponseBodyType = "Pod"
)

type GetProjectProjectIDPodResponseBody struct {
	Pod *shared.Pod

	Type GetProjectProjectIDPodResponseBodyType
}

func CreateGetProjectProjectIDPodResponseBodyPod(pod shared.Pod) GetProjectProjectIDPodResponseBody {
	typ := GetProjectProjectIDPodResponseBodyTypePod

	return GetProjectProjectIDPodResponseBody{
		Pod:  &pod,
		Type: typ,
	}
}

func (u *GetProjectProjectIDPodResponseBody) UnmarshalJSON(data []byte) error {

	pod := new(shared.Pod)
	if err := utils.UnmarshalJSON(data, &pod, "", true, true); err == nil {
		u.Pod = pod
		u.Type = GetProjectProjectIDPodResponseBodyTypePod
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectProjectIDPodResponseBody) MarshalJSON() ([]byte, error) {
	if u.Pod != nil {
		return utils.MarshalJSON(u.Pod, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectProjectIDPodResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A JSON array of pods
	Unions []GetProjectProjectIDPodResponseBody
	// Request issued incorrectly, for example missing parameters or wrong endpoint
	Error *shared.Error
}

func (o *GetProjectProjectIDPodResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProjectProjectIDPodResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProjectProjectIDPodResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProjectProjectIDPodResponse) GetUnions() []GetProjectProjectIDPodResponseBody {
	if o == nil {
		return nil
	}
	return o.Unions
}

func (o *GetProjectProjectIDPodResponse) GetError() *shared.Error {
	if o == nil {
		return nil
	}
	return o.Error
}
