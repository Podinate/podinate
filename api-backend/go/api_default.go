/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate. Login should be performed over oauth from [auth.podinate.com](https://auth.podinate.com)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"AccountDelete",
			strings.ToUpper("Delete"),
			"/v0/account",
			c.AccountDelete,
		},
		{
			"AccountGet",
			strings.ToUpper("Get"),
			"/v0/account",
			c.AccountGet,
		},
		{
			"AccountPatch",
			strings.ToUpper("Patch"),
			"/v0/account",
			c.AccountPatch,
		},
		{
			"AccountPost",
			strings.ToUpper("Post"),
			"/v0/account",
			c.AccountPost,
		},
		{
			"ProjectGet",
			strings.ToUpper("Get"),
			"/v0/project",
			c.ProjectGet,
		},
		{
			"ProjectIdDelete",
			strings.ToUpper("Delete"),
			"/v0/project/{id}",
			c.ProjectIdDelete,
		},
		{
			"ProjectIdGet",
			strings.ToUpper("Get"),
			"/v0/project/{id}",
			c.ProjectIdGet,
		},
		{
			"ProjectIdPatch",
			strings.ToUpper("Patch"),
			"/v0/project/{id}",
			c.ProjectIdPatch,
		},
		{
			"ProjectPost",
			strings.ToUpper("Post"),
			"/v0/project",
			c.ProjectPost,
		},
	}
}

// AccountDelete - Delete the account and all associated resources!
func (c *DefaultApiController) AccountDelete(w http.ResponseWriter, r *http.Request) {
	accountParam := r.Header.Get("account")
	result, err := c.service.AccountDelete(r.Context(), accountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AccountGet - Get information about the current account.
func (c *DefaultApiController) AccountGet(w http.ResponseWriter, r *http.Request) {
	accountParam := r.Header.Get("account")
	result, err := c.service.AccountGet(r.Context(), accountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AccountPatch - Update an existing account
func (c *DefaultApiController) AccountPatch(w http.ResponseWriter, r *http.Request) {
	accountParam := r.Header.Get("account")
	account2Param := Account{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&account2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccountRequired(account2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AccountPatch(r.Context(), accountParam, account2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AccountPost - Create a new account
func (c *DefaultApiController) AccountPost(w http.ResponseWriter, r *http.Request) {
	accountParam := Account{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&accountParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccountRequired(accountParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AccountPost(r.Context(), accountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ProjectGet - Returns a list of projects.
func (c *DefaultApiController) ProjectGet(w http.ResponseWriter, r *http.Request) {
	accountParam := r.Header.Get("account")
	result, err := c.service.ProjectGet(r.Context(), accountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ProjectIdDelete - Delete an existing project
func (c *DefaultApiController) ProjectIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	accountParam := r.Header.Get("account")
	result, err := c.service.ProjectIdDelete(r.Context(), idParam, accountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ProjectIdGet - Get an existing project given by ID
func (c *DefaultApiController) ProjectIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	accountParam := r.Header.Get("account")
	result, err := c.service.ProjectIdGet(r.Context(), idParam, accountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ProjectIdPatch - Update an existing project
func (c *DefaultApiController) ProjectIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	accountParam := r.Header.Get("account")
	result, err := c.service.ProjectIdPatch(r.Context(), idParam, accountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ProjectPost - Create a new project
func (c *DefaultApiController) ProjectPost(w http.ResponseWriter, r *http.Request) {
	accountParam := r.Header.Get("account")
	projectParam := Project{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectRequired(projectParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProjectPost(r.Context(), accountParam, projectParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
