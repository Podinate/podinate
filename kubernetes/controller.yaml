# the kubernetes yaml for a deployment running the image cosmtrek/air
apiVersion: v1
kind: Namespace
metadata:
  name: podinate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: podinate-controller
  namespace: podinate
  labels:
    app: podinate-controller
spec:
  selector:
    matchLabels:
      app: podinate-controller
  replicas: 1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: podinate-controller
    spec:
      containers:
        - name: backend
          image: johnofficial/podinate-controller
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: podinate-controller-env
          env:
            - name : POSTGRES_HOST
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: masterdb-secret
                  key: superUserPassword
            - name: CONFIG_FILE
              value: /etc/config/config.toml
          volumeMounts:
            - name: podinate-controller-config
              mountPath: /etc/config
      serviceAccountName: podinate-controller-deployment-manager
      volumes:
        - name: podinate-controller-config
          configMap:
            name: podinate-controller-config
            items:
              - key: config.toml
                path: config.toml
      
      
    

---
apiVersion: v1
kind: Service
metadata:
  name: podinate-controller
  labels:
    app: podinate-controller
spec:
  clusterIP: None
  ports:
    - port: 3000
      name: podinate-controller
  selector:
    app: podinate-controller

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: podinate-controller-env
  namespace: podinate
data:
  PORT: "3000"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: podinate-controller-config
  namespace: podinate
data:
  config.toml: |
    [database]
    host = "postgres"
    port = 5432
    user = "postgres"
    database = "podinate"


---
# ServiceAccount to give access to manage deployments in all namespaces
apiVersion: v1
kind: ServiceAccount
metadata:
  name: podinate-controller-deployment-manager
  namespace: podinate
---
# ClusterRole to give access to manage deployments in all namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: podinate-controller-deployment-manager
rules:
- apiGroups: ["apps"]
  resources: ["statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["statefulsets/status"]
  verbs: ["get", "update", "patch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
# ClusterRoleBinding to bind the ClusterRole to the ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: podinate-controller-deployment-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: podinate-controller-deployment-manager
subjects:
- kind: ServiceAccount
  name: podinate-controller-deployment-manager
  namespace: podinate

