/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Storage - A storage volume that is attached to each instance of a pod.
type Storage struct {

	// The name of the volume
	Name string `json:"name"`

	// The size of the volume in GB
	Size int32 `json:"size"`

	// The path to mount the volume at
	MountPath string `json:"mount_path"`

	// The global Resource ID of the volume
	ResourceId string `json:"resource_id,omitempty"`
}

// AssertStorageRequired checks if the required fields are not zero-ed
func AssertStorageRequired(obj Storage) error {
	elements := map[string]interface{}{
		"name":       obj.Name,
		"size":       obj.Size,
		"mount_path": obj.MountPath,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseStorageRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Storage (e.g. [][]Storage), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseStorageRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aStorage, ok := obj.(Storage)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertStorageRequired(aStorage)
	})
}
