openapi: 3.0.0
info:
  description: The API for the simple containerisation solution Podinate.
  title: Podinate API
  version: 0.0.1
servers:
- description: Production server
  url: https://api.podinate.com/v0
- description: Development Server
  url: http://localhost:3001/v0
security:
- APIKeyAuth: []
tags:
- description: Operations about accounts - accounts hold your resources and allow
    different users to have different permissions to them
  name: Account
- description: Operations related to your projects - projects are a distcint group
    of resources related to a single application or service
  name: Project
- description: "Operations related to pods - Pods are a group of containers with the\
    \ same lifecycle, and are the basic unit of deployment on Podinate"
  name: Pod
- description: "Operations related to users - users are the people who use Podinate,\
    \ and can have different permissions to different accounts. \n\nTo complete a\
    \ user login, you should call `/user/login/initiate` to get a login URL and token,\
    \ then redirect the user to that URL. \nOnce they have completed the login flow\
    \ on the provider, they will be redirected to `/user/login/callback/{provider}`.\
    \ \nYou should then call `/user/login/complete` with that token to get the user's\
    \ API key.\n"
  name: User
paths:
  /account:
    delete:
      description: Deletes the account and all associated resources! This is irreversible
        and may be used for example when a client project has finished or a migration
        is complete.
      parameters:
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Podinate receieved your request to delete the account - it
            will be processed in the background.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Delete the account and all associated resources!
      tags:
      - Account
    get:
      description: "Accounts are logically separate, distinct containers for different\
        \ customers or teams. For example you might have an account for your marketing\
        \ and product teams, or you might have an account for each client to separate\
        \ their workloads. Accounts can have their own security settings applied."
      parameters:
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Information about the given account
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request could not be completed due to a conflict with the
            current state of the resource
      summary: Get information about the current account.
      tags:
      - Account
    patch:
      description: "Update an existing account, for example to change the display\
        \ name"
      parameters:
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Account updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Update an existing account
      tags:
      - Account
    post:
      description: "Create a new logically separate account, for example for a given\
        \ client or team."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Account created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Create a new account
      tags:
      - Account
  /project:
    get:
      description: "Projects are a container for individual resources. For example\
        \ the my-cool-blog project might contain a pod running a Wordpress image,\
        \ a Postgres Neon database, and a bucket for storing uploads."
      parameters:
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      - description: The page number to return (starts at 0)
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: The amount of items to return per page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_project_get_200_response'
          description: A JSON array of projects
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Returns a list of projects.
      tags:
      - Project
    post:
      description: Creating a new project
      parameters:
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: A JSON object containing the information needed to create a new
          project
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: The project was created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Create a new project
      tags:
      - Project
      x-speakeasy-entity-operation: Project#create
  /project/{id}:
    delete:
      description: "Allows you to delete an existing project. This will delete all\
        \ associated resources, and is irreversible. Use with caution!"
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: "We received your request to delete the project, it will be\
            \ processed in the background."
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Delete an existing project
      tags:
      - Project
      x-speakeasy-entity-operation: Project#delete
    get:
      description: Allows you to see an existing project's configuration
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: "The was updated successfully, and returned the updated project\
            \ information"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Get an existing project given by ID
      tags:
      - Project
      x-speakeasy-entity-operation: Project#get
    patch:
      description: "Allows you to update or edit an existing project. For example,\
        \ you can update the tag to deploy when you have made and pushed a new build,\
        \ or change the image to run entirely."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: "The was updated successfully, and returned the updated project\
            \ information"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
      summary: Update an existing project
      tags:
      - Project
      x-speakeasy-entity-operation: Project#update
  /project/{project_id}/pod:
    get:
      description: "Returns a list of pods for a given project. Pods are the individual\
        \ running instances of a project, and are the smallest unit of deployment.\
        \ For example, a project might have a pod running a Wordpress image, a Postgres\
        \ Neon database, and a bucket for storing uploads."
      parameters:
      - description: The page number to return (starts at 0)
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: The amount of items to return per page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_project__project_id__pod_get_200_response'
          description: A JSON array of pods
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Get a list of pods for a given project
      tags:
      - Pod
    post:
      description: Creating a new pod
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pod'
        description: A JSON object containing the information needed to create a new
          pod
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: The pod was created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Create a new pod
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#create
  /project/{project_id}/pod/{pod_id}:
    delete:
      description: Delete a pod
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
        x-speakeasy-match: id
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: "We received your request to delete the pod, it will be processed\
            \ in the background."
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Delete a pod
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#delete
    get:
      description: Get a pod by ID
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
        x-speakeasy-match: id
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: An array of pods
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Get a pod by ID
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#get
    patch:
      description: Update a pod
      parameters:
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
        x-speakeasy-match: id
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pod'
        description: A JSON object containing the information needed to update a pod
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
          description: The pod was updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Update a pod
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#update
  /project/{project_id}/pod/{pod_id}/logs:
    get:
      description: Get the logs for a pod
      parameters:
      - description: The number of lines to return
        explode: false
        in: query
        name: lines
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: Whether to keep the connection open and continue streaming the
          logs
        explode: false
        in: query
        name: follow
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: false
        in: path
        name: project_id
        required: true
        schema:
          description: The project to look at
          example: hello-world
          type: string
        style: simple
      - explode: false
        in: path
        name: pod_id
        required: true
        schema:
          description: The pod to look at
          example: hello-world
          type: string
        style: simple
        x-speakeasy-match: id
      - description: The account to use for the request
        example: my-account
        explode: false
        in: header
        name: account
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: "127.0.0.1 - peter [9/Feb/2017:10:34:12 -0700] \"GET /sample-image.png\
                  \ HTTP/2\" 200 1479"
                type: string
          description: The logs for the given pod
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Get the logs for a pod
      tags:
      - Pod
      x-speakeasy-entity-operation: Pod#logs
  /user/login:
    post:
      description: Login to Podinate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_user_login_post_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_user_login_post_200_response'
          description: An array of pods
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid username or password
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      security: []
      summary: Login to Podinate
      tags:
      - User
  /user/login/initiate:
    get:
      description: "Get a login URL, which will redirect the user to the oauth provider\
        \ to complete the login flow. To complete a full login, you should then call\
        \ /user/login/complete with the token returned by this endpoint."
      parameters:
      - description: "The oauth provider to use. Valid options will be github / gitlab\
          \ / podinate, during alpha only podinate is allowed."
        explode: true
        in: query
        name: provider
        required: false
        schema:
          example: github
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_user_login_initiate_get_200_response'
          description: "A redirect URL to send the user to to complete the login flow,\
            \ and a token to use to get the user's actual API key once they have completed\
            \ the oauth flow"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      security: []
      summary: Get a login URL for oauth login
      tags:
      - User
  /user/login/redirect/{token}:
    get:
      description: "This API endpoint is not intended to be called directly. It is\
        \ used as the redirect URL for oauth providers, and will redirect the user\
        \ to the correct place once they have completed the login flow."
      parameters:
      - description: The token given by /user/login/init to get the user's actual
          API key once they have completed the oauth flow
        explode: false
        in: path
        name: token
        required: true
        schema:
          example: abc1234
          type: string
        style: simple
      responses:
        "200":
          content:
            text/html:
              schema:
                example: You should be redirected automatically. If not click here.
                type: string
          description: An array of pods
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      security: []
      summary: User login redirect URL to oauth providers
      tags:
      - User
  /user/login/callback/{provider}:
    get:
      description: "This API endpoint is not intended to be accessed directly. It\
        \ is used as the callback URL for oauth providers, and will redirect the user\
        \ to the correct place once they have completed the login flow."
      parameters:
      - description: "The oauth provider to use. Valid options will be github / gitlab\
          \ / podinate, during alpha only podinate is allowed."
        explode: false
        in: path
        name: provider
        required: true
        schema:
          example: github
          type: string
        style: simple
      responses:
        "200":
          content:
            text/html:
              schema:
                example: You have successfully logged in. Closing this window in 3
                  seconds...
                type: string
          description: An array of pods
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      security: []
      summary: User login callback URL for oauth providers
      tags:
      - User
  /user/login/complete:
    get:
      description: Complete a user login and swap the given login token for an API
        key
      parameters:
      - description: The token given by /user/login/init to get the user's actual
          API key once they have completed the oauth flow
        explode: true
        in: query
        name: token
        required: false
        schema:
          example: abc1234
          type: string
        style: form
      - explode: true
        in: query
        name: client
        required: false
        schema:
          example: Podinate CLI on James' Macbook Pro
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_user_login_post_200_response'
          description: An array of pods
        "204":
          description: "The login is still in progress, check back soon"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid login session token
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      security: []
      summary: Complete a user login
      tags:
      - User
  /user:
    get:
      description: Get the current user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user was returned successfully
        "204":
          description: No user is logged in
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Request issued incorrectly, for example missing parameters\
            \ or wrong endpoint"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal server error
      summary: Get the current user
      tags:
      - User
components:
  parameters:
    account:
      description: The account to use for the request
      example: my-account
      explode: false
      in: header
      name: account
      required: true
      schema:
        type: string
      style: simple
    project_id:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: The project to look at
        example: hello-world
        type: string
      style: simple
  responses:
    "400Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Request issued incorrectly, for example missing parameters or\
        \ wrong endpoint"
    "404Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The requested resource was not found
    "500Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: An internal server error
    "409Error":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request could not be completed due to a conflict with the current
        state of the resource
  schemas:
    Account:
      example:
        id: blog-prod
        name: Company Blog - Prod
      properties:
        id:
          description: The short name (slug/url) of the account. The account ID is
            globally unique and cannot be changed.
          example: blog-prod
          type: string
        name:
          description: "The human readable name of the account, used for display purposes."
          example: Tim's Widgets Company Blog - Prod
          type: string
        resource_id:
          description: The global Resource ID of the account
          example: account:podinate-blog-prod
          type: string
          x-speakeasy-param-readonly: true
    Project:
      description: "A project is a container for individual resources. For example\
        \ the my-cool-blog project might contain a pod running a Wordpress image,\
        \ a Postgres Neon database, and a bucket for storing uploads."
      example:
        image: wordpress
        name: Hello World
        id: hello-world
        tag: "6.0"
      properties:
        id:
          description: The short name (slug/url) of the project
          example: hello-world
          type: string
        name:
          description: The name of the app
          example: Hello World
          type: string
        resource_id:
          description: The global Resource ID of the project
          example: account:podinate/project:hello-world
          type: string
          x-speakeasy-param-readonly: true
      type: object
      x-speakeasy-entity: Project
    Pod:
      description: "A pod is a group of container instances with identical settings,\
        \ and are the basic unit of deployment on Podinate"
      example:
        id: hello-world
        name: Hello World
        image: wordpress
        tag: "6.0"
        status: running
        created_at: 2020-01-01T00:00:00Z
        resource_id: account:podinate/project:super-cool-app/pod:hello-world
        environment:
        - key: DB_PASSWORD
          value: abc1234
          secret: true
        services:
        - name: my-blog
          port: 80
          protocol: http
          domain_name: my-blog.podinate.app
      properties:
        id:
          description: The short name (slug/url) of the pod
          example: hello-world
          type: string
        name:
          description: The name of the pod
          example: Hello World
          type: string
        image:
          description: The container image to run for this pod
          example: wordpress
          type: string
        tag:
          description: The image tag to run for this pod
          example: "6.0"
          type: string
        volumes:
          description: The storage volumes attached to this pod
          example:
          - name: blog-images
            size: 10
            mount_path: /var/www/html/images
          items:
            $ref: '#/components/schemas/Volume'
          type: array
        environment:
          description: The environment variables to pass to the pod
          example:
          - key: DB_PASSWORD
            value: abc1234
            secret: true
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
          type: array
        services:
          description: The services to expose for this pod
          example:
          - name: my-blog
            port: 80
            protocol: http
            domain_name: my-blog.podinate.app
          items:
            $ref: '#/components/schemas/Service'
          type: array
        status:
          description: The current status of the pod
          example: running
          type: string
          x-speakeasy-param-readonly: true
        created_at:
          description: The date and time the pod was created
          example: 2020-01-01T00:00:00Z
          type: string
          x-speakeasy-param-readonly: true
        resource_id:
          description: The global Resource ID of the pod
          example: account:podinate/project:hello-world/pod:my-blog
          type: string
          x-speakeasy-param-readonly: true
      required:
      - image
      - name
      - tag
      type: object
      x-speakeasy-entity: Pod
    EnvironmentVariable:
      description: An environment variable is a key-value pair that is passed to the
        container when it is run.
      example:
        key: DB_PASSWORD
        value: abc1234
      properties:
        key:
          description: The key of the environment variable
          example: DB_PASSWORD
          type: string
        value:
          description: The value of the environment variable
          example: abc1234
          type: string
        secret:
          description: "Whether the value of the environment variable is a secret\
            \ or not. If it is a secret, it will not be returned in the API response."
          example: true
          type: boolean
      required:
      - key
      - value
      type: object
    Service:
      description: A service makes a Pod available to other Pods or to the internet
      properties:
        name:
          description: The hostname of the service
          example: my-blog
          type: string
        port:
          description: The port to expose the service on
          example: 80
          type: integer
        targetPort:
          description: "The port to forward traffic to, if different from the port.\
            \ Can be left blank if the same as the port."
          example: 80
          type: integer
        protocol:
          description: "The protocol to use for the service. Either http, tcp or udp."
          example: http
          type: string
        domain_name:
          description: "The domain name to use for the service. If left blank, the\
            \ service will only be available internally. If set, the service will\
            \ be available externally at the given domain name."
          example: my-blog.podinate.app
          type: string
      required:
      - name
      - port
      - protocol
    User:
      example:
        resource_id: user:podinate:mike
        email: mike@example.com
        display_name: Michael Jones
        avatar_url: https://avatars.githubusercontent.com/u/1234?v=4
      properties:
        resource_id:
          description: The global Resource ID of the user
          example: user:podinate:mike
          type: string
        email:
          description: The user's email address
          example: mike@example.com
          type: string
        display_name:
          description: The user's display name
          example: Michael Bolton
          type: string
        avatar_url:
          description: The URL of the user's avatar
          example: https://avatars.githubusercontent.com/u/1234?v=4
          type: string
    Volume:
      description: A storage volume that is attached to each instance of a pod.
      properties:
        name:
          description: The name of the volume
          example: blog-data
          type: string
        size:
          description: The size of the volume in GB
          example: 10
          type: integer
        mount_path:
          description: The path to mount the volume at
          example: /var/www/html
          type: string
        class:
          description: "The class of the volume, for example \"standard\" or \"premium\""
          example: standard
          type: string
      required:
      - mount_path
      - name
      - size
      type: object
    Error:
      properties:
        code:
          default: 400
          description: The http code of the error message (400)
          example: 400
          type: number
        message:
          description: The human-readable description of what went wrong
          example: Missing required parameter 'account'
          type: string
      type: object
    _project_get_200_response_items_inner:
      oneOf:
      - $ref: '#/components/schemas/Project'
    _project_get_200_response:
      example:
        total: 1
        limit: 20
        page: 0
        items:
        - null
        - null
      properties:
        items:
          items:
            $ref: '#/components/schemas/_project_get_200_response_items_inner'
          type: array
        total:
          description: The total number of projects
          example: 1
          type: integer
        page:
          description: The current page number
          example: 0
          type: integer
        limit:
          description: The number of items per page
          example: 20
          type: integer
      type: object
    _project__project_id__pod_get_200_response_items_inner:
      oneOf:
      - $ref: '#/components/schemas/Pod'
    _project__project_id__pod_get_200_response:
      example:
        total: 1
        limit: 20
        page: 0
        items:
        - null
        - null
      properties:
        items:
          items:
            $ref: '#/components/schemas/_project__project_id__pod_get_200_response_items_inner'
          type: array
        total:
          description: The total number of pods
          example: 1
          type: integer
        page:
          description: The current page number
          example: 0
          type: integer
        limit:
          description: The number of items per page
          example: 20
          type: integer
      required:
      - limit
      - page
      - total
      type: object
    _user_login_post_request:
      properties:
        username:
          description: The user's email address
          example: michael
          type: string
        password:
          description: The user's password
          example: abc1234
          type: string
        client:
          description: The client name to use for the login
          example: Podinate CLI on James' Macbook Pro
          type: string
      required:
      - password
      - username
      type: object
    _user_login_post_200_response:
      example:
        api_key: abc1234
        logged_in: true
      properties:
        logged_in:
          description: Whether the user is logged in or not
          example: true
          type: boolean
        api_key:
          description: "The user's API key, if they are logged in"
          example: abc1234
          type: string
      type: object
    _user_login_initiate_get_200_response:
      example:
        url: https://auth.podinate.com/login?state=1234&client_id=1234&redirect_uri=https://api.podinate.com/v0/user/login/callback
        token: abc1234
      properties:
        url:
          description: The URL to redirect the user to
          example: https://auth.podinate.com/login?state=1234&client_id=1234&redirect_uri=https://api.podinate.com/v0/user/login/callback
          type: string
        token:
          description: The token to use to get the user's actual API key once they
            have completed the oauth flow
          example: abc1234
          type: string
      type: object
  securitySchemes:
    APIKeyAuth:
      in: header
      name: Authorization
      type: apiKey
