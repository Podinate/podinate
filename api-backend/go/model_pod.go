/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Pod - A pod is a group of container instances with identical settings, and are the basic unit of deployment on Podinate
type Pod struct {

	// The short name (slug/url) of the pod
	Id string `json:"id,omitempty"`

	// The name of the pod
	Name string `json:"name"`

	// The container image to run for this pod
	Image string `json:"image"`

	// The image tag to run for this pod
	Tag string `json:"tag"`

	// The storage volumes attached to this pod
	Storage []Storage `json:"storage,omitempty"`

	// The environment variables to pass to the pod
	Environment []EnvironmentVariable `json:"environment,omitempty"`

	// The services to expose for this pod
	Services []Service `json:"services,omitempty"`

	// The current status of the pod
	Status string `json:"status,omitempty"`

	// The date and time the pod was created
	CreatedAt string `json:"created_at,omitempty"`

	// The global Resource ID of the pod
	ResourceId string `json:"resource_id,omitempty"`
}

// AssertPodRequired checks if the required fields are not zero-ed
func AssertPodRequired(obj Pod) error {
	elements := map[string]interface{}{
		"name":  obj.Name,
		"image": obj.Image,
		"tag":   obj.Tag,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Storage {
		if err := AssertStorageRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Environment {
		if err := AssertEnvironmentVariableRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Services {
		if err := AssertServiceRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecursePodRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Pod (e.g. [][]Pod), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePodRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPod, ok := obj.(Pod)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPodRequired(aPod)
	})
}
