/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type UserLoginPostRequest struct {

	// The user's email address
	Username string `json:"username"`

	// The user's password
	Password string `json:"password"`

	// The client name to use for the login
	Client string `json:"client,omitempty"`
}

// AssertUserLoginPostRequestRequired checks if the required fields are not zero-ed
func AssertUserLoginPostRequestRequired(obj UserLoginPostRequest) error {
	elements := map[string]interface{}{
		"username": obj.Username,
		"password": obj.Password,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseUserLoginPostRequestRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UserLoginPostRequest (e.g. [][]UserLoginPostRequest), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserLoginPostRequestRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUserLoginPostRequest, ok := obj.(UserLoginPostRequest)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserLoginPostRequestRequired(aUserLoginPostRequest)
	})
}
