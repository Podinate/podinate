/*
Podinate API

Testing SharedVolumeApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api_client

import (
	"context"
	openapiclient "github.com/Podinate/podinate/lib/api_client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_client_SharedVolumeApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SharedVolumeApiService ProjectProjectIdSharedVolumesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.SharedVolumeApi.ProjectProjectIdSharedVolumesGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedVolumeApiService ProjectProjectIdSharedVolumesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.SharedVolumeApi.ProjectProjectIdSharedVolumesPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedVolumeApiService ProjectProjectIdSharedVolumesVolumeIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var volumeId string

		resp, httpRes, err := apiClient.SharedVolumeApi.ProjectProjectIdSharedVolumesVolumeIdGet(context.Background(), projectId, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedVolumeApiService ProjectProjectIdSharedVolumesVolumeIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var volumeId string

		resp, httpRes, err := apiClient.SharedVolumeApi.ProjectProjectIdSharedVolumesVolumeIdPut(context.Background(), projectId, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
