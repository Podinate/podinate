// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/podinate/terraform-provider-podinate/internal/sdk/pkg/models/shared"
)

func (r *PodDataSourceModel) RefreshFromGetResponse(resp *shared.Pod) {
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(*resp.CreatedAt)
	} else {
		r.CreatedAt = types.StringNull()
	}
	if len(r.Environment) > len(resp.Environment) {
		r.Environment = r.Environment[:len(resp.Environment)]
	}
	for environmentCount, environmentItem := range resp.Environment {
		var environment1 EnvironmentVariable
		environment1.Key = types.StringValue(environmentItem.Key)
		environment1.Value = types.StringValue(environmentItem.Value)
		if environmentItem.Secret != nil {
			environment1.Secret = types.BoolValue(*environmentItem.Secret)
		} else {
			environment1.Secret = types.BoolNull()
		}
		if environmentCount+1 > len(r.Environment) {
			r.Environment = append(r.Environment, environment1)
		} else {
			r.Environment[environmentCount].Key = environment1.Key
			r.Environment[environmentCount].Value = environment1.Value
			r.Environment[environmentCount].Secret = environment1.Secret
		}
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	r.Image = types.StringValue(resp.Image)
	r.Name = types.StringValue(resp.Name)
	if resp.ResourceID != nil {
		r.ResourceID = types.StringValue(*resp.ResourceID)
	} else {
		r.ResourceID = types.StringNull()
	}
	if len(r.Services) > len(resp.Services) {
		r.Services = r.Services[:len(resp.Services)]
	}
	for servicesCount, servicesItem := range resp.Services {
		var services1 Service
		services1.Name = types.StringValue(servicesItem.Name)
		services1.Port = types.Int64Value(servicesItem.Port)
		if servicesItem.TargetPort != nil {
			services1.TargetPort = types.Int64Value(*servicesItem.TargetPort)
		} else {
			services1.TargetPort = types.Int64Null()
		}
		services1.Protocol = types.StringValue(servicesItem.Protocol)
		if servicesItem.DomainName != nil {
			services1.DomainName = types.StringValue(*servicesItem.DomainName)
		} else {
			services1.DomainName = types.StringNull()
		}
		if servicesCount+1 > len(r.Services) {
			r.Services = append(r.Services, services1)
		} else {
			r.Services[servicesCount].Name = services1.Name
			r.Services[servicesCount].Port = services1.Port
			r.Services[servicesCount].TargetPort = services1.TargetPort
			r.Services[servicesCount].Protocol = services1.Protocol
			r.Services[servicesCount].DomainName = services1.DomainName
		}
	}
	if resp.Status != nil {
		r.Status = types.StringValue(*resp.Status)
	} else {
		r.Status = types.StringNull()
	}
	r.Tag = types.StringValue(resp.Tag)
	if len(r.Volumes) > len(resp.Volumes) {
		r.Volumes = r.Volumes[:len(resp.Volumes)]
	}
	for volumesCount, volumesItem := range resp.Volumes {
		var volumes1 Volume
		volumes1.Name = types.StringValue(volumesItem.Name)
		volumes1.Size = types.Int64Value(volumesItem.Size)
		volumes1.MountPath = types.StringValue(volumesItem.MountPath)
		if volumesItem.Class != nil {
			volumes1.Class = types.StringValue(*volumesItem.Class)
		} else {
			volumes1.Class = types.StringNull()
		}
		if volumesCount+1 > len(r.Volumes) {
			r.Volumes = append(r.Volumes, volumes1)
		} else {
			r.Volumes[volumesCount].Name = volumes1.Name
			r.Volumes[volumesCount].Size = volumes1.Size
			r.Volumes[volumesCount].MountPath = volumes1.MountPath
			r.Volumes[volumesCount].Class = volumes1.Class
		}
	}
}
