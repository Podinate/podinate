/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// EnvironmentVariable - An environment variable is a key-value pair that is passed to the container when it is run.
type EnvironmentVariable struct {

	// The key of the environment variable
	Key string `json:"key"`

	// The value of the environment variable
	Value string `json:"value"`

	// Whether the value of the environment variable is a secret or not. If it is a secret, it will not be returned in the API response.
	Secret bool `json:"secret,omitempty"`
}

// AssertEnvironmentVariableRequired checks if the required fields are not zero-ed
func AssertEnvironmentVariableRequired(obj EnvironmentVariable) error {
	elements := map[string]interface{}{
		"key":   obj.Key,
		"value": obj.Value,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseEnvironmentVariableRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EnvironmentVariable (e.g. [][]EnvironmentVariable), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEnvironmentVariableRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEnvironmentVariable, ok := obj.(EnvironmentVariable)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEnvironmentVariableRequired(aEnvironmentVariable)
	})
}
