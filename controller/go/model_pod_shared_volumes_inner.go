/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type PodSharedVolumesInner struct {

	// The short name (slug/url) of the shared volume
	VolumeId string `json:"volume_id"`

	// The path to mount the shared volume at
	Path string `json:"path"`
}

// AssertPodSharedVolumesInnerRequired checks if the required fields are not zero-ed
func AssertPodSharedVolumesInnerRequired(obj PodSharedVolumesInner) error {
	elements := map[string]interface{}{
		"volume_id": obj.VolumeId,
		"path":      obj.Path,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecursePodSharedVolumesInnerRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of PodSharedVolumesInner (e.g. [][]PodSharedVolumesInner), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePodSharedVolumesInnerRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPodSharedVolumesInner, ok := obj.(PodSharedVolumesInner)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPodSharedVolumesInnerRequired(aPodSharedVolumesInner)
	})
}
