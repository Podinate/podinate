// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/podinate/terraform-provider-podinate/internal/sdk/pkg/models/shared"
	"github.com/podinate/terraform-provider-podinate/internal/sdk/pkg/utils"
	"net/http"
)

type GetProjectRequest struct {
	// The page number to return (starts at 0)
	Page *int64 `default:"0" queryParam:"style=form,explode=true,name=page"`
	// The amount of items to return per page
	Limit *int64 `default:"20" queryParam:"style=form,explode=true,name=limit"`
	// The account to use for the request
	Account string `header:"style=simple,explode=false,name=account"`
}

func (g GetProjectRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetProjectRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetProjectRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetProjectRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectRequest) GetAccount() string {
	if o == nil {
		return ""
	}
	return o.Account
}

type ItemsType string

const (
	ItemsTypeProject ItemsType = "Project"
)

type Items struct {
	Project *shared.Project

	Type ItemsType
}

func CreateItemsProject(project shared.Project) Items {
	typ := ItemsTypeProject

	return Items{
		Project: &project,
		Type:    typ,
	}
}

func (u *Items) UnmarshalJSON(data []byte) error {

	project := new(shared.Project)
	if err := utils.UnmarshalJSON(data, &project, "", true, true); err == nil {
		u.Project = project
		u.Type = ItemsTypeProject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Items) MarshalJSON() ([]byte, error) {
	if u.Project != nil {
		return utils.MarshalJSON(u.Project, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetProjectResponseBody - A JSON array of projects
type GetProjectResponseBody struct {
	Items []Items `json:"items,omitempty"`
	// The total number of projects
	Total *int64 `json:"total,omitempty"`
	// The current page number
	Page *int64 `json:"page,omitempty"`
	// The number of items per page
	Limit *int64 `json:"limit,omitempty"`
}

func (o *GetProjectResponseBody) GetItems() []Items {
	if o == nil {
		return nil
	}
	return o.Items
}

func (o *GetProjectResponseBody) GetTotal() *int64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *GetProjectResponseBody) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetProjectResponseBody) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type GetProjectResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A JSON array of projects
	Object *GetProjectResponseBody
	// An internal server error
	Error *shared.Error
}

func (o *GetProjectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProjectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProjectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProjectResponse) GetObject() *GetProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *GetProjectResponse) GetError() *shared.Error {
	if o == nil {
		return nil
	}
	return o.Error
}
