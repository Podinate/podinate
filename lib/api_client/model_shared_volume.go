/*
Podinate API

The API for the simple containerisation solution Podinate.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
)

// checks if the SharedVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedVolume{}

// SharedVolume A shared volume is a storage volume that can be shared by multiple pods to store data.
type SharedVolume struct {
	// The short name (slug/url) of the shared volume
	Id string `json:"id"`
	// The name of the shared volume
	Name *string `json:"name,omitempty"`
	// The size of the shared volume in GB
	Size int32 `json:"size"`
	// The class of the shared volume, for example \"standard\" or \"premium\"
	Class *string `json:"class,omitempty"`
	// The global Resource ID of the shared volume
	ResourceId *string `json:"resource_id,omitempty"`
}

// NewSharedVolume instantiates a new SharedVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedVolume(id string, size int32) *SharedVolume {
	this := SharedVolume{}
	this.Id = id
	this.Size = size
	return &this
}

// NewSharedVolumeWithDefaults instantiates a new SharedVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedVolumeWithDefaults() *SharedVolume {
	this := SharedVolume{}
	return &this
}

// GetId returns the Id field value
func (o *SharedVolume) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SharedVolume) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SharedVolume) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SharedVolume) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedVolume) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SharedVolume) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SharedVolume) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value
func (o *SharedVolume) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SharedVolume) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SharedVolume) SetSize(v int32) {
	o.Size = v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *SharedVolume) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedVolume) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *SharedVolume) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *SharedVolume) SetClass(v string) {
	o.Class = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *SharedVolume) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedVolume) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *SharedVolume) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *SharedVolume) SetResourceId(v string) {
	o.ResourceId = &v
}

func (o SharedVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["size"] = o.Size
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	return toSerialize, nil
}

type NullableSharedVolume struct {
	value *SharedVolume
	isSet bool
}

func (v NullableSharedVolume) Get() *SharedVolume {
	return v.value
}

func (v *NullableSharedVolume) Set(val *SharedVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedVolume(val *SharedVolume) *NullableSharedVolume {
	return &NullableSharedVolume{value: val, isSet: true}
}

func (v NullableSharedVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
