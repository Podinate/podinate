// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/podinate/terraform-provider-podinate/internal/sdk"
	"github.com/podinate/terraform-provider-podinate/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PodResource{}
var _ resource.ResourceWithImportState = &PodResource{}

func NewPodResource() resource.Resource {
	return &PodResource{}
}

// PodResource defines the resource implementation.
type PodResource struct {
	client *sdk.SDK
}

// PodResourceModel describes the resource data model.
type PodResourceModel struct {
	Account     types.String          `tfsdk:"account"`
	CreatedAt   types.String          `tfsdk:"created_at"`
	Environment []EnvironmentVariable `tfsdk:"environment"`
	ID          types.String          `tfsdk:"id"`
	Image       types.String          `tfsdk:"image"`
	Name        types.String          `tfsdk:"name"`
	ProjectID   types.String          `tfsdk:"project_id"`
	ResourceID  types.String          `tfsdk:"resource_id"`
	Services    []Service             `tfsdk:"services"`
	Status      types.String          `tfsdk:"status"`
	Tag         types.String          `tfsdk:"tag"`
	Volumes     []Volume              `tfsdk:"volumes"`
}

func (r *PodResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_pod"
}

func (r *PodResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Pod Resource",

		Attributes: map[string]schema.Attribute{
			"account": schema.StringAttribute{
				Required:    true,
				Description: `The account to use for the request`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `The date and time the pod was created`,
			},
			"environment": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required:    true,
							Description: `The key of the environment variable`,
						},
						"secret": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Whether the value of the environment variable is a secret or not. If it is a secret, it will not be returned in the API response.`,
						},
						"value": schema.StringAttribute{
							Required:    true,
							Description: `The value of the environment variable`,
						},
					},
				},
				Description: `The environment variables to pass to the pod`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The short name (slug/url) of the pod`,
			},
			"image": schema.StringAttribute{
				Required:    true,
				Description: `The container image to run for this pod`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The name of the pod`,
			},
			"project_id": schema.StringAttribute{
				Required: true,
			},
			"resource_id": schema.StringAttribute{
				Computed:    true,
				Description: `The global Resource ID of the pod`,
			},
			"services": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"domain_name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The domain name to use for the service. If left blank, the service will only be available internally. If set, the service will be available externally at the given domain name.`,
						},
						"name": schema.StringAttribute{
							Required:    true,
							Description: `The hostname of the service`,
						},
						"port": schema.Int64Attribute{
							Required:    true,
							Description: `The port to expose the service on`,
						},
						"protocol": schema.StringAttribute{
							Required:    true,
							Description: `The protocol to use for the service. Either http, tcp or udp.`,
						},
						"target_port": schema.Int64Attribute{
							Computed:    true,
							Optional:    true,
							Description: `The port to forward traffic to, if different from the port. Can be left blank if the same as the port.`,
						},
					},
				},
				Description: `The services to expose for this pod`,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `The current status of the pod`,
			},
			"tag": schema.StringAttribute{
				Required:    true,
				Description: `The image tag to run for this pod`,
			},
			"volumes": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"class": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The class of the volume, for example "standard" or "premium"`,
						},
						"mount_path": schema.StringAttribute{
							Required:    true,
							Description: `The path to mount the volume at`,
						},
						"name": schema.StringAttribute{
							Required:    true,
							Description: `The name of the volume`,
						},
						"size": schema.Int64Attribute{
							Required:    true,
							Description: `The size of the volume in GB`,
						},
					},
				},
				Description: `The storage volumes attached to this pod`,
			},
		},
	}
}

func (r *PodResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PodResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PodResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	projectID := data.ProjectID.ValueString()
	account := data.Account.ValueString()
	pod := *data.ToCreateSDKType()
	request := operations.PostProjectProjectIDPodRequest{
		ProjectID: projectID,
		Account:   account,
		Pod:       pod,
	}
	res, err := r.client.Pod.PostProjectProjectIDPod(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Pod == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.Pod)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PodResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PodResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	projectID := data.ProjectID.ValueString()
	podID := data.ID.ValueString()
	account := data.Account.ValueString()
	request := operations.GetProjectProjectIDPodPodIDRequest{
		ProjectID: projectID,
		PodID:     podID,
		Account:   account,
	}
	res, err := r.client.Pod.GetProjectProjectIDPodPodID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Pod == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.Pod)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PodResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PodResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	projectID := data.ProjectID.ValueString()
	podID := data.ID.ValueString()
	account := data.Account.ValueString()
	pod := *data.ToUpdateSDKType()
	request := operations.PatchProjectProjectIDPodPodIDRequest{
		ProjectID: projectID,
		PodID:     podID,
		Account:   account,
		Pod:       pod,
	}
	res, err := r.client.Pod.PatchProjectProjectIDPodPodID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Pod == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.Pod)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PodResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PodResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	projectID := data.ProjectID.ValueString()
	podID := data.ID.ValueString()
	account := data.Account.ValueString()
	request := operations.DeleteProjectProjectIDPodPodIDRequest{
		ProjectID: projectID,
		PodID:     podID,
		Account:   account,
	}
	res, err := r.client.Pod.DeleteProjectProjectIDPodPodID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 202 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *PodResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource pod. Reason: composite imports strings not supported.")
}
