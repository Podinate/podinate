/*
 * Podinate API
 *
 * The API for the simple containerisation solution Podinate.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ProjectGet200Response struct {
	Items []ProjectGet200ResponseItemsInner `json:"items,omitempty"`

	// The total number of projects
	Total int32 `json:"total,omitempty"`

	// The current page number
	Page int32 `json:"page,omitempty"`

	// The number of items per page
	Limit int32 `json:"limit,omitempty"`
}

// AssertProjectGet200ResponseRequired checks if the required fields are not zero-ed
func AssertProjectGet200ResponseRequired(obj ProjectGet200Response) error {
	for _, el := range obj.Items {
		if err := AssertProjectGet200ResponseItemsInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseProjectGet200ResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ProjectGet200Response (e.g. [][]ProjectGet200Response), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseProjectGet200ResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aProjectGet200Response, ok := obj.(ProjectGet200Response)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertProjectGet200ResponseRequired(aProjectGet200Response)
	})
}
